// Code generated by MockGen. DO NOT EDIT.
// Source: pb_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/whosefriendA/firEtcd/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockRaftClient is a mock of RaftClient interface.
type MockRaftClient struct {
	ctrl     *gomock.Controller
	recorder *MockRaftClientMockRecorder
}

// MockRaftClientMockRecorder is the mock recorder for MockRaftClient.
type MockRaftClientMockRecorder struct {
	mock *MockRaftClient
}

// NewMockRaftClient creates a new mock instance.
func NewMockRaftClient(ctrl *gomock.Controller) *MockRaftClient {
	mock := &MockRaftClient{ctrl: ctrl}
	mock.recorder = &MockRaftClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftClient) EXPECT() *MockRaftClientMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockRaftClient) AppendEntries(ctx context.Context, in *pb.AppendEntriesArgs, opts ...grpc.CallOption) (*pb.AppendEntriesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendEntries", varargs...)
	ret0, _ := ret[0].(*pb.AppendEntriesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockRaftClientMockRecorder) AppendEntries(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockRaftClient)(nil).AppendEntries), varargs...)
}

// RequestVote mocks base method.
func (m *MockRaftClient) RequestVote(ctx context.Context, in *pb.RequestVoteArgs, opts ...grpc.CallOption) (*pb.RequestVoteReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestVote", varargs...)
	ret0, _ := ret[0].(*pb.RequestVoteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockRaftClientMockRecorder) RequestVote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockRaftClient)(nil).RequestVote), varargs...)
}

// SnapshotInstall mocks base method.
func (m *MockRaftClient) SnapshotInstall(ctx context.Context, in *pb.SnapshotInstallArgs, opts ...grpc.CallOption) (*pb.SnapshotInstallReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnapshotInstall", varargs...)
	ret0, _ := ret[0].(*pb.SnapshotInstallReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotInstall indicates an expected call of SnapshotInstall.
func (mr *MockRaftClientMockRecorder) SnapshotInstall(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotInstall", reflect.TypeOf((*MockRaftClient)(nil).SnapshotInstall), varargs...)
}

// MockRaftServer is a mock of RaftServer interface.
type MockRaftServer struct {
	ctrl     *gomock.Controller
	recorder *MockRaftServerMockRecorder
}

// MockRaftServerMockRecorder is the mock recorder for MockRaftServer.
type MockRaftServerMockRecorder struct {
	mock *MockRaftServer
}

// NewMockRaftServer creates a new mock instance.
func NewMockRaftServer(ctrl *gomock.Controller) *MockRaftServer {
	mock := &MockRaftServer{ctrl: ctrl}
	mock.recorder = &MockRaftServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftServer) EXPECT() *MockRaftServerMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockRaftServer) AppendEntries(arg0 context.Context, arg1 *pb.AppendEntriesArgs) (*pb.AppendEntriesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntries", arg0, arg1)
	ret0, _ := ret[0].(*pb.AppendEntriesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockRaftServerMockRecorder) AppendEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockRaftServer)(nil).AppendEntries), arg0, arg1)
}

// RequestVote mocks base method.
func (m *MockRaftServer) RequestVote(arg0 context.Context, arg1 *pb.RequestVoteArgs) (*pb.RequestVoteReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVote", arg0, arg1)
	ret0, _ := ret[0].(*pb.RequestVoteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockRaftServerMockRecorder) RequestVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockRaftServer)(nil).RequestVote), arg0, arg1)
}

// SnapshotInstall mocks base method.
func (m *MockRaftServer) SnapshotInstall(arg0 context.Context, arg1 *pb.SnapshotInstallArgs) (*pb.SnapshotInstallReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotInstall", arg0, arg1)
	ret0, _ := ret[0].(*pb.SnapshotInstallReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotInstall indicates an expected call of SnapshotInstall.
func (mr *MockRaftServerMockRecorder) SnapshotInstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotInstall", reflect.TypeOf((*MockRaftServer)(nil).SnapshotInstall), arg0, arg1)
}

// MockUnsafeRaftServer is a mock of UnsafeRaftServer interface.
type MockUnsafeRaftServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRaftServerMockRecorder
}

// MockUnsafeRaftServerMockRecorder is the mock recorder for MockUnsafeRaftServer.
type MockUnsafeRaftServerMockRecorder struct {
	mock *MockUnsafeRaftServer
}

// NewMockUnsafeRaftServer creates a new mock instance.
func NewMockUnsafeRaftServer(ctrl *gomock.Controller) *MockUnsafeRaftServer {
	mock := &MockUnsafeRaftServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRaftServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRaftServer) EXPECT() *MockUnsafeRaftServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRaftServer mocks base method.
func (m *MockUnsafeRaftServer) mustEmbedUnimplementedRaftServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRaftServer")
}

// mustEmbedUnimplementedRaftServer indicates an expected call of mustEmbedUnimplementedRaftServer.
func (mr *MockUnsafeRaftServerMockRecorder) mustEmbedUnimplementedRaftServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRaftServer", reflect.TypeOf((*MockUnsafeRaftServer)(nil).mustEmbedUnimplementedRaftServer))
}

// MockKvserverClient is a mock of KvserverClient interface.
type MockKvserverClient struct {
	ctrl     *gomock.Controller
	recorder *MockKvserverClientMockRecorder
}

// MockKvserverClientMockRecorder is the mock recorder for MockKvserverClient.
type MockKvserverClientMockRecorder struct {
	mock *MockKvserverClient
}

// NewMockKvserverClient creates a new mock instance.
func NewMockKvserverClient(ctrl *gomock.Controller) *MockKvserverClient {
	mock := &MockKvserverClient{ctrl: ctrl}
	mock.recorder = &MockKvserverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvserverClient) EXPECT() *MockKvserverClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKvserverClient) Get(ctx context.Context, in *pb.GetArgs, opts ...grpc.CallOption) (*pb.GetReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*pb.GetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKvserverClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKvserverClient)(nil).Get), varargs...)
}

// PutAppend mocks base method.
func (m *MockKvserverClient) PutAppend(ctx context.Context, in *pb.PutAppendArgs, opts ...grpc.CallOption) (*pb.PutAppendReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAppend", varargs...)
	ret0, _ := ret[0].(*pb.PutAppendReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppend indicates an expected call of PutAppend.
func (mr *MockKvserverClientMockRecorder) PutAppend(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppend", reflect.TypeOf((*MockKvserverClient)(nil).PutAppend), varargs...)
}

// MockKvserverServer is a mock of KvserverServer interface.
type MockKvserverServer struct {
	ctrl     *gomock.Controller
	recorder *MockKvserverServerMockRecorder
}

// MockKvserverServerMockRecorder is the mock recorder for MockKvserverServer.
type MockKvserverServerMockRecorder struct {
	mock *MockKvserverServer
}

// NewMockKvserverServer creates a new mock instance.
func NewMockKvserverServer(ctrl *gomock.Controller) *MockKvserverServer {
	mock := &MockKvserverServer{ctrl: ctrl}
	mock.recorder = &MockKvserverServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvserverServer) EXPECT() *MockKvserverServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKvserverServer) Get(arg0 context.Context, arg1 *pb.GetArgs) (*pb.GetReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKvserverServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKvserverServer)(nil).Get), arg0, arg1)
}

// PutAppend mocks base method.
func (m *MockKvserverServer) PutAppend(arg0 context.Context, arg1 *pb.PutAppendArgs) (*pb.PutAppendReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppend", arg0, arg1)
	ret0, _ := ret[0].(*pb.PutAppendReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppend indicates an expected call of PutAppend.
func (mr *MockKvserverServerMockRecorder) PutAppend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppend", reflect.TypeOf((*MockKvserverServer)(nil).PutAppend), arg0, arg1)
}

// MockUnsafeKvserverServer is a mock of UnsafeKvserverServer interface.
type MockUnsafeKvserverServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKvserverServerMockRecorder
}

// MockUnsafeKvserverServerMockRecorder is the mock recorder for MockUnsafeKvserverServer.
type MockUnsafeKvserverServerMockRecorder struct {
	mock *MockUnsafeKvserverServer
}

// NewMockUnsafeKvserverServer creates a new mock instance.
func NewMockUnsafeKvserverServer(ctrl *gomock.Controller) *MockUnsafeKvserverServer {
	mock := &MockUnsafeKvserverServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKvserverServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKvserverServer) EXPECT() *MockUnsafeKvserverServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKvserverServer mocks base method.
func (m *MockUnsafeKvserverServer) mustEmbedUnimplementedKvserverServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKvserverServer")
}

// mustEmbedUnimplementedKvserverServer indicates an expected call of mustEmbedUnimplementedKvserverServer.
func (mr *MockUnsafeKvserverServerMockRecorder) mustEmbedUnimplementedKvserverServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKvserverServer", reflect.TypeOf((*MockUnsafeKvserverServer)(nil).mustEmbedUnimplementedKvserverServer))
}
