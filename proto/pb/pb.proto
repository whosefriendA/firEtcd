syntax = "proto3";

package fir.pb;
option go_package = "firEtcd/proto/pb;pb";

message RequestVoteArgs {
  int64 Term = 1;
  int64 CandidateId = 2;
  int64 LastLogIndex = 3;
  int64 LastLogTerm = 4;
}

message RequestVoteReply {
  int64 Term = 1;
  bool VoteGranted = 2;
}

message AppendEntriesArgs {
  int64 Term = 1;
  int64 LeaderId = 2;
  int64 PrevLogIndex = 3;
  int64 PrevLogTerm = 4;
  int64 LeaderCommit = 5;
  repeated LogType Entries = 6;
}

message LogType {
  int64 Term = 1;
  bytes Value = 2;
}

message AppendEntriesReply {
  int64 Term = 1;
  bool Success = 2;
  int64 ConflictIndex = 3;
  int64 ConflictTerm = 4;
}

message SnapshotInstallArgs {
  int64 Term = 1;
  int64 LeaderId = 2;
  int64 LastIncludeIndex = 3;
  int64 LastIncludeTerm = 4;
  bytes Data = 5;
}

message SnapshotInstallReply { int64 Term = 1; }

service raft {
  rpc SnapshotInstall(SnapshotInstallArgs) returns (SnapshotInstallReply);
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply);
  rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply);
}
enum OpType {
  GetT = 0;
  PutT = 1;
  AppendT = 2;
  DelT = 3;
  DelWithPrefix = 4;
  BatchT = 5;
  CAST = 6;
  EmptyT = 7; // indicate a empty log only use to update leader commitIndex
  GetKeys = 8;
  GetKVs = 9;
}
// Put or Append
message PutAppendArgs {
  string Key = 1;
  bytes Value = 2;
  int64 DeadTime = 3;
  bytes OriValue = 4;
  int32 Op = 5; // "Put" or "Append" or "Del" or "DelWithPrefix"
                // You'll have to add definitions here.
                // Field names must start with capital
                // letters, otherwise RPC will break.
  int64 ClientId = 6;
  int32 LatestOffset = 7;
  int64 LeaseId = 8; // optional lease id; if non-zero, server will attach key to the lease
}

message PutAppendReply {
  int32 Err = 1;
  int32 LeaderId = 2;
  int32 ServerId = 3;
}

message GetArgs {
  string Key = 1;
  int64 ClientId = 2;
  int32 LatestOffset = 3;
  bool WithPrefix = 4;
  int32 PageSize = 5;
  int32 PageIndex = 6;
  OpType Op = 7;
}

message GetReply {
  int32 Err = 1;
  int32 LeaderId = 2;
  repeated bytes Value = 3;
  int32 ServerId = 4;
}

enum EventType {
  PUT_EVENT = 0;
  DELETE_EVENT = 1;
}

message WatchRequest {
  bytes key = 1;
  bool is_prefix = 2;
  bool send_initial_state = 3;
}

message WatchResponse {
  EventType type = 1;
  bytes key = 2;
  bytes value = 3;
}

service kvserver {
  rpc Get(GetArgs) returns (GetReply);
  rpc PutAppend(PutAppendArgs) returns (PutAppendReply);
  rpc Watch(WatchRequest) returns (stream WatchResponse);
}

// Lease service definitions
message LeaseGrantRequest {
  int64 TTLMs = 1; // TTL in milliseconds
}

message LeaseGrantResponse {
  int64 ID = 1;
  int64 TTLMs = 2;
}

message LeaseRevokeRequest {
  int64 ID = 1;
}

message LeaseRevokeResponse {}

message LeaseKeepAliveRequest {
  int64 ID = 1;
}

message LeaseKeepAliveResponse {
  int64 ID = 1;
  int64 TTLMs = 2; // remaining TTL in ms
}

message LeaseTimeToLiveRequest {
  int64 ID = 1;
  bool keys = 2; // whether to return attached keys
}

message LeaseTimeToLiveResponse {
  int64 ID = 1;
  int64 TTLMs = 2; // remaining TTL in ms
  repeated string keys = 3;
}

service lease {
  rpc LeaseGrant(LeaseGrantRequest) returns (LeaseGrantResponse);
  rpc LeaseRevoke(LeaseRevokeRequest) returns (LeaseRevokeResponse);
  rpc LeaseKeepAlive(stream LeaseKeepAliveRequest) returns (stream LeaseKeepAliveResponse);
  rpc LeaseTimeToLive(LeaseTimeToLiveRequest) returns (LeaseTimeToLiveResponse);
}